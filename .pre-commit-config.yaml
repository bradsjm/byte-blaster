# Pre-commit configuration for byte-blaster
# See https://pre-commit.com for more information
# Install with: pip install pre-commit && pre-commit install

repos:
    # Built-in hooks
    - repo: https://github.com/pre-commit/pre-commit-hooks
      rev: v4.6.0
      hooks:
          - id: trailing-whitespace
            args: [--markdown-linebreak-ext=md]
          - id: end-of-file-fixer
          - id: check-yaml
            args: [--unsafe]
          - id: check-toml
          - id: check-json
          - id: check-xml
          - id: check-merge-conflict
          - id: check-case-conflict
          - id: check-added-large-files
            args: [--maxkb=1000]
          - id: check-docstring-first
          - id: debug-statements
          - id: name-tests-test
            args: [--pytest-test-first]
          - id: requirements-txt-fixer
          - id: fix-byte-order-marker
          - id: mixed-line-ending
            args: [--fix=lf]

    # Python code formatting with ruff
    - repo: https://github.com/astral-sh/ruff-pre-commit
      rev: v0.8.4
      hooks:
          # Linter
          - id: ruff
            name: ruff lint
            args: [--fix, --exit-non-zero-on-fix]
            types_or: [python, pyi, jupyter]

          # Formatter
          - id: ruff-format
            name: ruff format
            types_or: [python, pyi, jupyter]

    # Type checking with basedpyright
    - repo: https://github.com/RobertCraigie/pyright-python
      rev: v1.1.401
      hooks:
          - id: pyright
            name: pyright type check
            entry: basedpyright
            language: node
            types: [python]
            additional_dependencies: ["basedpyright@1.29.2"]
            args: [src/byteblaster]
            pass_filenames: false

    # Security scanning
    - repo: https://github.com/PyCQA/bandit
      rev: 1.7.10
      hooks:
          - id: bandit
            name: bandit security scan
            args: [-r, src/byteblaster, -f, json]
            types: [python]

    # Documentation checks
    - repo: https://github.com/pycqa/pydocstyle
      rev: 6.3.0
      hooks:
          - id: pydocstyle
            name: pydocstyle docstring check
            args: [--convention=pep257, --add-ignore=D203, D213]
            files: ^src/byteblaster/

    # YAML formatting
    - repo: https://github.com/pre-commit/mirrors-prettier
      rev: v4.0.0-alpha.8
      hooks:
          - id: prettier
            name: prettier yaml/json/md format
            types_or: [yaml, json, markdown]
            args: [--prose-wrap=always, --print-width=100]

    # Markdown linting
    - repo: https://github.com/igorshubovych/markdownlint-cli
      rev: v0.42.0
      hooks:
          - id: markdownlint
            name: markdownlint
            args: [--fix, --disable, MD013, MD033, MD041]

    # Shell script linting
    - repo: https://github.com/koalaman/shellcheck-precommit
      rev: v0.10.0
      hooks:
          - id: shellcheck
            name: shellcheck shell script lint
            types: [shell]

    # Local hooks for project-specific checks
    - repo: local
      hooks:
          - id: typing-validation
            name: validate typing configuration
            entry: uv run python scripts/validate_typing.py
            language: system
            pass_filenames: false
            files: ^(src/byteblaster/|pyproject\.toml|MANIFEST\.in)

          - id: check-version-consistency
            name: check version consistency
            entry: python
            language: system
            args:
                - -c
                - |
                    import re
                    from pathlib import Path

                    # Get version from pyproject.toml
                    pyproject = Path("pyproject.toml").read_text()
                    pyproject_match = re.search(r'version = "([^"]+)"', pyproject)
                    if not pyproject_match:
                        exit(1)
                    pyproject_version = pyproject_match.group(1)

                    # Get version from __init__.py
                    init_file = Path("src/byteblaster/__init__.py")
                    if init_file.exists():
                        init_content = init_file.read_text()
                        init_match = re.search(r'__version__ = "([^"]+)"', init_content)
                        if init_match:
                            init_version = init_match.group(1)
                            if pyproject_version != init_version:
                                print(f"Version mismatch: pyproject.toml={pyproject_version}, __init__.py={init_version}")
                                exit(1)

                    print(f"Version consistency check passed: {pyproject_version}")
            pass_filenames: false
            files: ^(pyproject\.toml|src/byteblaster/__init__\.py)$

          - id: check-no-debug-imports
            name: check for debug imports
            entry: python
            language: system
            args:
                - -c
                - |
                    import sys
                    import re

                    debug_patterns = [
                        r'import pdb',
                        r'pdb\.set_trace',
                        r'import ipdb',
                        r'ipdb\.set_trace',
                        r'import pudb',
                        r'pudb\.set_trace',
                        r'breakpoint\(',
                        r'print\s*\(',  # Basic print check
                    ]

                    for filename in sys.argv[1:]:
                        with open(filename, 'r') as f:
                            content = f.read()
                            for pattern in debug_patterns:
                                if re.search(pattern, content):
                                    print(f"Debug code found in {filename}: {pattern}")
                                    sys.exit(1)
            types: [python]
            exclude: ^(tests/|examples/|scripts/)

          - id: check-todo-fixme
            name: check for TODO/FIXME comments
            entry: python
            language: system
            args:
                - -c
                - |
                    import sys
                    import re

                    todo_patterns = [
                        r'# TODO(?!.*\(.*\))',  # TODO without issue reference
                        r'# FIXME(?!.*\(.*\))', # FIXME without issue reference
                        r'# XXX',
                        r'# HACK',
                    ]

                    for filename in sys.argv[1:]:
                        with open(filename, 'r') as f:
                            lines = f.readlines()
                            for i, line in enumerate(lines, 1):
                                for pattern in todo_patterns:
                                    if re.search(pattern, line, re.IGNORECASE):
                                        print(f"{filename}:{i} - Please reference an issue number for: {line.strip()}")
                                        print(f"  Use format: # TODO(#123): description")
                                        sys.exit(1)
            types: [python]
            exclude: ^(tests/|examples/)

# Configuration for pre-commit itself
default_install_hook_types: [pre-commit, pre-push]
default_stages: [pre-commit]

# Hook-specific configurations
ci:
    autofix_prs: true
    autoupdate_schedule: weekly
    autoupdate_commit_msg: "chore: update pre-commit hooks"
    skip: [typing-validation] # Skip heavy checks in CI

# Custom settings
minimum_pre_commit_version: "3.0.0"

# Exclude patterns (files/directories to skip)
exclude: |
    (?x)^(
      \.git/|
      \.venv/|
      __pycache__/|
      \.pytest_cache/|
      \.ruff_cache/|
      \.mypy_cache/|
      build/|
      dist/|
      \.eggs/|
      .*\.egg-info/|
      node_modules/|
      \.tox/
    )
